{"version":3,"sources":["../src/index.js"],"names":["require","DomainBrute","opts","callback","server","filePath","concurrency","target","bar","setServers","readFileSync","names","map","_","trim","join","ip","vhost","resolve","reject","port","socket","createConnection","host","write","data","Buffer","setTimeout","on","chunk","concat","end","err","response","toString","sep","includes","headers","split","field","startsWith","substr","banner","length","domain","time","Date","resolve4","result","timeEnd","s","tick","httpBanner","then","interrupt","Array","isArray","JSON","stringify","console","log","readFile","fileData","dict","generateDict","complete","incomplete","width","total","resolveDomain","bind"],"mappings":"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","file":"index.js","sourcesContent":["require('babel-polyfill')\nrequire('babel-register')\n\nimport Dns from 'dns'\nimport Net from 'net'\nimport fs from 'fs'\nimport Promise from 'bluebird'\nimport ProgressBar from 'progress'\n\nexport default class DomainBrute {\n  constructor(opts, callback) {\n    const { server, filePath, concurrency, target } = opts\n    this.opts = opts\n    this.target = target\n    this.filePath = filePath\n    this.concurrency = concurrency\n    this.callback = callback || (() => {})\n    this.bar = null\n    Dns.setServers(server)\n    return this\n  }\n\n  readFile (filePath) {\n    return fs.readFileSync(filePath, 'utf8')\n  }\n\n  generateDict (names) {\n    return names.map(_ => [_.trim(), this.target].join('.'))\n  }\n\n  httpBanner(ip, vhost) {\n    return new Promise((resolve, reject) => {\n      const port = 80\n      const socket = Net.createConnection({ port, host: ip })\n      socket.write(`HEAD / HTTP/1.1\\r\\nHost: ${vhost}\\r\\nUser-agent: Mozilla/5.0\\r\\n\\r\\n`)\n      let data = Buffer('')\n      socket\n        .setTimeout(2000)\n        .on('data', (chunk) => {\n          data = Buffer.concat([data, chunk])\n          socket.end()\n        })\n        .on('error', (err) => null)\n        .on('end', () => {\n          const response = data.toString('utf8')\n          const sep = response.includes('\\r\\n') ? '\\r\\n' : '\\n'\n          const headers = response.split(sep)\n          for (const field of headers) {\n            if (field.startsWith('Server: ')) return resolve(field.substr(8))\n          }\n          const banner = headers[0].split(' ')\n          if (banner.length > 1) return resolve(`HTTP ${banner[1]}`)\n          resolve()\n        })\n    })\n  }\n\n  resolveDomain (domain) {\n    return new Promise((resolve, reject) => {\n      const time = new Date\n      Dns.resolve4(domain, (err, result) => {\n        const timeEnd = new Date\n        const s = timeEnd - time\n        this.bar.tick(1)\n        if (err) {\n          // 返回 reject 将会中断全部 map\n          this.callback(err)\n          return resolve()\n        }\n\n        // 无论有无 banner 都会执行 then 操作\n        this.httpBanner(result[0], domain).then((banner) => {\n           this.bar.interrupt(`${domain} - ${Array.isArray(result) ? result.join(', ') : JSON.stringify(result)}${banner ? ' [' + banner + ']' : ''} - ${s}ms`)\n        })\n\n        this.callback(null, {domain, result})\n        return resolve(result)\n      })\n    })\n  }\n\n  async run () {\n    const { server, filePath, concurrency, target } = this.opts\n    console.log(`DEBUG: opts:${JSON.stringify({ server, filePath, concurrency, target })}`)\n    const fileData = await this.readFile(this.filePath)\n    const names = fileData.trim().split('\\n')\n    const dict = this.generateDict(names)\n\n    const bar = new ProgressBar('Running [:bar] :current/:total :percent :etas', {\n      complete: '=',\n      incomplete: ' ',\n      width: 50,\n      total: dict.length,\n    })\n\n    this.bar = bar\n    return Promise.map(dict, this.resolveDomain.bind(this), { concurrency: this.concurrency })\n  }\n}\n"]}